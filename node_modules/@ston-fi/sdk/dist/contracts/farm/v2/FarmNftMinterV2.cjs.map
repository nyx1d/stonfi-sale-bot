{"version":3,"file":"FarmNftMinterV2.cjs","sources":["../../../../src/contracts/farm/v2/FarmNftMinterV2.ts"],"sourcesContent":["import type { ContractProvider } from \"@ton/ton\";\n\nimport { FARM_VERSION } from \"../constants\";\nimport {\n  FarmNftMinterV1,\n  type FarmNftMinterV1Options,\n} from \"../v1/FarmNftMinterV1\";\n\nexport interface FarmNftMinterV2Options extends FarmNftMinterV1Options {}\n\n/**\n * @deprecated `v2` version of the FarmNftMinter contracts is deprecated.\n *\n * Only use this version for get data contract calls.\n * For all other operations, use the latest version of the contract.\n */\nexport class FarmNftMinterV2 extends FarmNftMinterV1 {\n  public static version = FARM_VERSION.v2;\n\n  /**\n   * @returns structure containing pending data\n   *\n   * @property {bigint} changeCustodianTs - Timestamp when 'change_custodian' was initiated\n   * @property {bigint} sendMsgTs - Timestamp when 'send_raw_msg' was initiated\n   * @property {bigint} codeUpgradeTs - Timestamp when 'code_upgrade' was initiated\n   * @property {Address} newCustodian - New custodian that will be set after confirmation\n   * @property {Cell} pendingMsg - Pending msg that will be sends after confirmation\n   * @property {Cell} newCode - New contract code that will be set after confirmation\n   * @property {Cell} newStorage - New contract storage that will be set after confirmation\n   */\n  public async getPendingData(provider: ContractProvider) {\n    const result = await provider.get(\"get_pending_data\", []);\n\n    return {\n      changeCustodianTs: result.stack.readBigNumber(),\n      sendMsgTs: result.stack.readBigNumber(),\n      codeUpgradeTs: result.stack.readBigNumber(),\n      newCustodian: result.stack.readAddressOpt(),\n      pendingMsg: result.stack.readCell(),\n      newCode: result.stack.readCell(),\n      newStorage: result.stack.readCell(),\n    };\n  }\n\n  /**\n   * @returns structure containing version data\n   *\n   * @property {number} major - Major version; breaking changes in api\n   * @property {number} minor - Minor version; non-breaking new functionality\n   * @property {string} development - Development version; can contain breaking changes\n   */\n  public async getVersion(provider: ContractProvider) {\n    const result = await provider.get(\"get_version\", []);\n\n    return {\n      major: result.stack.readNumber(),\n      minor: result.stack.readNumber(),\n      development: result.stack.readString(),\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the minter\n   *\n   * @property {bigint} nextItemIndex - Index of the next nft in this collection\n   * @property {bigint} lastUpdateTime - Last time farming values were updated\n   * @property {number} status - Status of the contract: uninitialized `0`, active `1`, paused `3`\n   * @property {bigint} depositedNanorewards - Deposited rewards in nanounits\n   * @property {bigint} currentStakedTokens - Number of staked tokens in basic token units\n   * @property {bigint} accruedPerUnitNanorewards - Number of accrued nanorewards per basic stake token unit\n   * @property {bigint} claimedFeeNanorewards - Claimed fees\n   * @property {bigint} accruedFeeNanorewards - Accrued fees\n   * @property {bigint} accruedNanorewards - Total number of accrued rewards in nanounits\n   * @property {bigint} claimedNanorewards - Number of claimed rewards in nanounits\n   * @property {bigint} contractUniqueId - Minter id\n   * @property {bigint} nanorewardsPer24h - Total number of accrued rewards per 24h in nanounits\n   * @property {bigint} adminFee - Admin fee; divider is 10000\n   * @property {bigint} minStakeTime - Minimum staking time\n   * @property {Address} stakingTokenWallet - Minter's staking jetton wallet\n   * @property {Address} rewardTokenWallet - Minter's reward jetton wallet\n   * @property {Address} custodianAddress - Custodian address\n   * @property {boolean} canChangeCustodian - If can change custodian\n   * @property {boolean} canSendRawMsg - If can send raw msg\n   * @property {boolean} canChangeFee - If can change fee\n   * @property {boolean} unrestrictedDepositRewards - If rewards can be deposited by anyone\n   * @property {boolean} soulboundItems - Whether minted NFTs are soulbound; Always true in V2\n   */\n  public override async getFarmingMinterData(provider: ContractProvider) {\n    const result = await provider.get(\"get_farming_minter_data\", []);\n\n    return {\n      nextItemIndex: result.stack.readBigNumber(),\n      lastUpdateTime: result.stack.readBigNumber(),\n      status: result.stack.readNumber(),\n      depositedNanorewards: result.stack.readBigNumber(),\n      currentStakedTokens: result.stack.readBigNumber(),\n      accruedPerUnitNanorewards: result.stack.readBigNumber(),\n      claimedFeeNanorewards: result.stack.readBigNumber(),\n      accruedFeeNanorewards: result.stack.readBigNumber(),\n      accruedNanorewards: result.stack.readBigNumber(),\n      claimedNanorewards: result.stack.readBigNumber(),\n      contractUniqueId: result.stack.readBigNumber(),\n      nanorewardsPer24h: result.stack.readBigNumber(),\n      adminFee: result.stack.readBigNumber(),\n      minStakeTime: result.stack.readBigNumber(),\n      stakingTokenWallet: result.stack.readAddress(),\n      rewardTokenWallet: result.stack.readAddress(),\n      custodianAddress: result.stack.readAddressOpt(),\n      canChangeCustodian: result.stack.readBoolean(),\n      canSendRawMsg: result.stack.readBoolean(),\n      canChangeFee: result.stack.readBoolean(),\n      unrestrictedDepositRewards: result.stack.readBoolean(),\n\n      // NFTs are always soulbound in V2\n      soulboundItems: true,\n    };\n  }\n}\n"],"names":["FarmNftMinterV1","FARM_VERSION"],"mappings":";;;;AAgBO,MAAM,wBAAwBA,gBAAAA,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcnD,MAAa,eAAe,UAA4B;AACtD,UAAM,SAAS,MAAM,SAAS,IAAI,oBAAoB,CAAE,CAAA;AAEjD,WAAA;AAAA,MACL,mBAAmB,OAAO,MAAM,cAAc;AAAA,MAC9C,WAAW,OAAO,MAAM,cAAc;AAAA,MACtC,eAAe,OAAO,MAAM,cAAc;AAAA,MAC1C,cAAc,OAAO,MAAM,eAAe;AAAA,MAC1C,YAAY,OAAO,MAAM,SAAS;AAAA,MAClC,SAAS,OAAO,MAAM,SAAS;AAAA,MAC/B,YAAY,OAAO,MAAM,SAAS;AAAA,IAAA;AAAA,EAEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,WAAW,UAA4B;AAClD,UAAM,SAAS,MAAM,SAAS,IAAI,eAAe,CAAE,CAAA;AAE5C,WAAA;AAAA,MACL,OAAO,OAAO,MAAM,WAAW;AAAA,MAC/B,OAAO,OAAO,MAAM,WAAW;AAAA,MAC/B,aAAa,OAAO,MAAM,WAAW;AAAA,IAAA;AAAA,EAEzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,MAAsB,qBAAqB,UAA4B;AACrE,UAAM,SAAS,MAAM,SAAS,IAAI,2BAA2B,CAAE,CAAA;AAExD,WAAA;AAAA,MACL,eAAe,OAAO,MAAM,cAAc;AAAA,MAC1C,gBAAgB,OAAO,MAAM,cAAc;AAAA,MAC3C,QAAQ,OAAO,MAAM,WAAW;AAAA,MAChC,sBAAsB,OAAO,MAAM,cAAc;AAAA,MACjD,qBAAqB,OAAO,MAAM,cAAc;AAAA,MAChD,2BAA2B,OAAO,MAAM,cAAc;AAAA,MACtD,uBAAuB,OAAO,MAAM,cAAc;AAAA,MAClD,uBAAuB,OAAO,MAAM,cAAc;AAAA,MAClD,oBAAoB,OAAO,MAAM,cAAc;AAAA,MAC/C,oBAAoB,OAAO,MAAM,cAAc;AAAA,MAC/C,kBAAkB,OAAO,MAAM,cAAc;AAAA,MAC7C,mBAAmB,OAAO,MAAM,cAAc;AAAA,MAC9C,UAAU,OAAO,MAAM,cAAc;AAAA,MACrC,cAAc,OAAO,MAAM,cAAc;AAAA,MACzC,oBAAoB,OAAO,MAAM,YAAY;AAAA,MAC7C,mBAAmB,OAAO,MAAM,YAAY;AAAA,MAC5C,kBAAkB,OAAO,MAAM,eAAe;AAAA,MAC9C,oBAAoB,OAAO,MAAM,YAAY;AAAA,MAC7C,eAAe,OAAO,MAAM,YAAY;AAAA,MACxC,cAAc,OAAO,MAAM,YAAY;AAAA,MACvC,4BAA4B,OAAO,MAAM,YAAY;AAAA;AAAA,MAGrD,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AACF;AArGa,gBACG,UAAUC,UAAAA,aAAa;;"}