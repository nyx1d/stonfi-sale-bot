{"version":3,"file":"FarmNftItemV2.cjs","sources":["../../../../src/contracts/farm/v2/FarmNftItemV2.ts"],"sourcesContent":["import type { Cell, ContractProvider, Sender, SenderArguments } from \"@ton/ton\";\n\nimport type { AmountType, QueryIdType } from \"@/types\";\nimport { createSbtDestroyMessage } from \"@/utils/createSbtDestroyMessage\";\n\nimport { FARM_VERSION } from \"../constants\";\nimport { FarmNftItemV1, type FarmNftItemV1Options } from \"../v1/FarmNftItemV1\";\n\nexport interface FarmNftItemV2Options extends FarmNftItemV1Options {}\n\n/**\n * @deprecated `v2` version of the FarmNftItem contracts is deprecated.\n *\n * Only use this version to claim rewards and unstake tokens from the contract.\n * For all other operations, use the latest version of the contract.\n */\nexport class FarmNftItemV2 extends FarmNftItemV1 {\n  public static version = FARM_VERSION.v2;\n\n  public async createDestroyBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return createSbtDestroyMessage({\n      queryId: params?.queryId ?? 0,\n    });\n  }\n\n  /**\n   * Build all data required to execute a `destroy` transaction.\n   *\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `destroy` transaction.\n   */\n  public async getDestroyTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createDestroyBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.destroy);\n\n    return { to, value, body };\n  }\n\n  public async sendDestroy(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<FarmNftItemV2[\"getDestroyTxParams\"]>[1],\n  ) {\n    const txParams = await this.getDestroyTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`\n   * @property {bigint} revokeTime Timestamp of unstake\n   * @property {bigint} stakedTokens Amount of staked tokens\n   * @property {bigint} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards\n   * @property {bigint} stakeDate Timestamp in which the owner started staking\n   * @property {boolean} isSoulbound If nft is soulbound; Always true in V2\n   */\n  public override async getFarmingData(provider: ContractProvider) {\n    const result = await provider.get(\"get_farming_data\", []);\n\n    return {\n      status: result.stack.readNumber(),\n      revokeTime: result.stack.readBigNumber(),\n      stakedTokens: result.stack.readBigNumber(),\n      claimedPerUnitNanorewards: result.stack.readBigNumber(),\n      stakeDate: result.stack.readBigNumber(),\n      isSoulbound: true, // NFTs are always soulbound in V2\n    };\n  }\n}\n"],"names":["FarmNftItemV1","createSbtDestroyMessage","FARM_VERSION"],"mappings":";;;;;AAgBO,MAAM,sBAAsBA,cAAAA,cAAc;AAAA,EAG/C,MAAa,kBAAkB,QAEb;AAChB,WAAOC,gDAAwB;AAAA,MAC7B,UAAS,iCAAQ,YAAW;AAAA,IAAA,CAC7B;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,mBACX,UACA,QAI0B;AAC1B,UAAM,KAAK,KAAK;AAEV,UAAA,OAAO,MAAM,KAAK,kBAAkB;AAAA,MACxC,SAAS,iCAAQ;AAAA,IAAA,CAClB;AAED,UAAM,QAAQ,QAAO,iCAAQ,cAAa,KAAK,aAAa,OAAO;AAE5D,WAAA,EAAE,IAAI,OAAO;EACtB;AAAA,EAEA,MAAa,YACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,mBAAmB,UAAU,MAAM;AAExD,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAsB,eAAe,UAA4B;AAC/D,UAAM,SAAS,MAAM,SAAS,IAAI,oBAAoB,CAAE,CAAA;AAEjD,WAAA;AAAA,MACL,QAAQ,OAAO,MAAM,WAAW;AAAA,MAChC,YAAY,OAAO,MAAM,cAAc;AAAA,MACvC,cAAc,OAAO,MAAM,cAAc;AAAA,MACzC,2BAA2B,OAAO,MAAM,cAAc;AAAA,MACtD,WAAW,OAAO,MAAM,cAAc;AAAA,MACtC,aAAa;AAAA;AAAA,IAAA;AAAA,EAEjB;AACF;AArEa,cACG,UAAUC,UAAAA,aAAa;;"}