{"version":3,"file":"FarmNftItemV1.js","sources":["../../../../src/contracts/farm/v1/FarmNftItemV1.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport { Contract, type ContractOptions } from \"@/contracts/core/Contract\";\nimport type { AddressType, AmountType, QueryIdType } from \"@/types\";\n\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\n\nexport interface FarmNftItemV1Options extends ContractOptions {\n  gasConstants?: Partial<typeof FarmNftItemV1.gasConstants>;\n}\n\n/**\n * @deprecated `v1` version of the FarmNftItem contracts is deprecated.\n *\n * Only use this version to claim rewards and unstake tokens from the contract.\n * For all other operations, use the latest version of the contract.\n */\nexport class FarmNftItemV1 extends Contract {\n  public static readonly version: FARM_VERSION = FARM_VERSION.v1;\n\n  public static readonly gasConstants = {\n    claimRewards: toNano(\"0.3\"),\n    unstake: toNano(\"0.4\"),\n    destroy: toNano(\"0.05\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: FarmNftItemV1Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...FarmNftItemV1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createClaimRewardsBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(FARM_OP_CODES.CLAIM_REWARDS, 32)\n      .storeUint(BigInt(params?.queryId ?? 0), 64)\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `claim_rewards` transaction.\n   *\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `claim_rewards` transaction.\n   */\n  public async getClaimRewardsTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createClaimRewardsBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.claimRewards);\n\n    return { to, value, body };\n  }\n\n  public async sendClaimRewards(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<FarmNftItemV1[\"getClaimRewardsTxParams\"]>[1],\n  ) {\n    const txParams = await this.getClaimRewardsTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createUnstakeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(FARM_OP_CODES.UNSTAKE, 32)\n      .storeUint(BigInt(params?.queryId ?? 0), 64)\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `unstake` transaction.\n   *\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `unstake` transaction.\n   */\n  public async getUnstakeTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createUnstakeBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.unstake);\n\n    return { to, value, body };\n  }\n\n  public async sendUnstake(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<FarmNftItemV1[\"getUnstakeTxParams\"]>[1],\n  ) {\n    const txParams = await this.getUnstakeTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`\n   * @property {boolean} isSoulbound If nft is soulbound\n   * @property {bigint} stakedTokens Amount of staked tokens\n   * @property {bigint} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards\n   */\n  public async getFarmingData(provider: ContractProvider) {\n    const result = await provider.get(\"get_farming_data\", []);\n\n    return {\n      status: result.stack.readNumber(),\n      isSoulbound: result.stack.readBoolean(),\n      stakedTokens: result.stack.readBigNumber(),\n      claimedPerUnitNanorewards: result.stack.readBigNumber(),\n    };\n  }\n}\n"],"names":["_FarmNftItemV1"],"mappings":";;;AAwBO,MAAM,iBAAN,MAAMA,wBAAsB,SAAS;AAAA,EAW1C,YACE,SACA,EAAE,cAAc,GAAG,QAAQ,IAA0B,CAAA,GACrD;AACA,UAAM,SAAS,OAAO;AAEtB,SAAK,eAAe;AAAA,MAClB,GAAGA,gBAAc;AAAA,MACjB,GAAG;AAAA,IAAA;AAAA,EAEP;AAAA,EAEA,MAAa,uBAAuB,QAElB;AAChB,WAAO,UAAU,EACd,UAAU,cAAc,eAAe,EAAE,EACzC,UAAU,QAAO,iCAAQ,YAAW,CAAC,GAAG,EAAE,EAC1C;EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,wBACX,UACA,QAI0B;AAC1B,UAAM,KAAK,KAAK;AAEV,UAAA,OAAO,MAAM,KAAK,uBAAuB;AAAA,MAC7C,SAAS,iCAAQ;AAAA,IAAA,CAClB;AAED,UAAM,QAAQ,QAAO,iCAAQ,cAAa,KAAK,aAAa,YAAY;AAEjE,WAAA,EAAE,IAAI,OAAO;EACtB;AAAA,EAEA,MAAa,iBACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,wBAAwB,UAAU,MAAM;AAE7D,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AAAA,EAEA,MAAa,kBAAkB,QAEb;AAChB,WAAO,UAAU,EACd,UAAU,cAAc,SAAS,EAAE,EACnC,UAAU,QAAO,iCAAQ,YAAW,CAAC,GAAG,EAAE,EAC1C;EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,mBACX,UACA,QAI0B;AAC1B,UAAM,KAAK,KAAK;AAEV,UAAA,OAAO,MAAM,KAAK,kBAAkB;AAAA,MACxC,SAAS,iCAAQ;AAAA,IAAA,CAClB;AAED,UAAM,QAAQ,QAAO,iCAAQ,cAAa,KAAK,aAAa,OAAO;AAE5D,WAAA,EAAE,IAAI,OAAO;EACtB;AAAA,EAEA,MAAa,YACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,mBAAmB,UAAU,MAAM;AAExD,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,eAAe,UAA4B;AACtD,UAAM,SAAS,MAAM,SAAS,IAAI,oBAAoB,CAAE,CAAA;AAEjD,WAAA;AAAA,MACL,QAAQ,OAAO,MAAM,WAAW;AAAA,MAChC,aAAa,OAAO,MAAM,YAAY;AAAA,MACtC,cAAc,OAAO,MAAM,cAAc;AAAA,MACzC,2BAA2B,OAAO,MAAM,cAAc;AAAA,IAAA;AAAA,EAE1D;AACF;AAnIa,eACY,UAAwB,aAAa;AADjD,eAGY,eAAe;AAAA,EACpC,cAAc,OAAO,KAAK;AAAA,EAC1B,SAAS,OAAO,KAAK;AAAA,EACrB,SAAS,OAAO,MAAM;AACxB;AAPK,IAAM,gBAAN;"}