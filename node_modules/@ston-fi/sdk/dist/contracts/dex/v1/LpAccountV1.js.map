{"version":3,"file":"LpAccountV1.js","sources":["../../../../src/contracts/dex/v1/LpAccountV1.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport { Contract, type ContractOptions } from \"@/contracts/core/Contract\";\nimport type { AddressType, AmountType, QueryIdType } from \"@/types\";\n\nimport { DEX_OP_CODES, DEX_VERSION } from \"../constants\";\n\nexport interface LpAccountV1Options extends ContractOptions {\n  gasConstants?: Partial<typeof LpAccountV1.gasConstants>;\n}\n\n/**\n * The lp account contract holds information about the liquidity provided by the user before minting new liquidity.\n * It interacts only with a single pool contract. For each user, there is single account contract for each pool.\n * The router “routes” the temporary liquidity to the correct account contract.\n * Then the account contract calls the pool contract again to mint new liquidity (once it satisfies some requirements).\n */\nexport class LpAccountV1 extends Contract {\n  public static readonly version = DEX_VERSION.v1;\n\n  public static readonly gasConstants = {\n    refund: toNano(\"0.3\"),\n    directAddLp: toNano(\"0.3\"),\n    resetGas: toNano(\"0.3\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: LpAccountV1Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...LpAccountV1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createRefundBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.REFUND_ME, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `refund_me` transaction.\n   *\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `refund_me` transaction.\n   */\n  public async getRefundTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createRefundBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.refund);\n\n    return { to, value, body };\n  }\n\n  public async sendRefund(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV1[\"getRefundTxParams\"]>[1],\n  ) {\n    const txParams = await this.getRefundTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createDirectAddLiquidityBody(params: {\n    amount0: AmountType;\n    amount1: AmountType;\n    minimumLpToMint?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.DIRECT_ADD_LIQUIDITY, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .storeCoins(BigInt(params.amount0))\n      .storeCoins(BigInt(params.amount1))\n      .storeCoins(BigInt(params.minimumLpToMint ?? 1))\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `direct_add_liquidity` transaction.\n   *\n   * @param {bigint | number} params.amount0 - Amount of the first Jetton tokens (in basic token units)\n   * @param {bigint | number} params.amount1 - Amount of the second Jetton tokens (in basic token units)\n   * @param {bigint | number | undefined} params.minimumLpToMint - Optional; minimum amount of received liquidity tokens (in basic token units)\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `direct_add_liquidity` transaction.\n   */\n  public async getDirectAddLiquidityTxParams(\n    provider: ContractProvider,\n    params: {\n      amount0: AmountType;\n      amount1: AmountType;\n      minimumLpToMint?: AmountType;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createDirectAddLiquidityBody({\n      amount0: params.amount0,\n      amount1: params.amount1,\n      minimumLpToMint: params.minimumLpToMint,\n      queryId: params.queryId,\n    });\n\n    const value = BigInt(params.gasAmount ?? this.gasConstants.directAddLp);\n\n    return { to, value, body };\n  }\n\n  public async sendDirectAddLiquidity(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV1[\"getDirectAddLiquidityTxParams\"]>[1],\n  ) {\n    const txParams = await this.getDirectAddLiquidityTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createResetGasBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.RESET_GAS, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `reset_gas` transaction.\n   *\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `reset_gas` transaction.\n   */\n  public async getResetGasTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createResetGasBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.resetGas);\n\n    return { to, value, body };\n  }\n\n  public async sendResetGas(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV1[\"getResetGasTxParams\"]>[1],\n  ) {\n    const txParams = await this.getResetGasTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  /**\n   * @returns structure containing current state of the lp account.\n   */\n  public async getLpAccountData(provider: ContractProvider) {\n    const result = await provider.get(\"get_lp_account_data\", []);\n\n    return {\n      userAddress: result.stack.readAddress(),\n      poolAddress: result.stack.readAddress(),\n      amount0: result.stack.readBigNumber(),\n      amount1: result.stack.readBigNumber(),\n    };\n  }\n}\n"],"names":["_LpAccountV1"],"mappings":"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"}