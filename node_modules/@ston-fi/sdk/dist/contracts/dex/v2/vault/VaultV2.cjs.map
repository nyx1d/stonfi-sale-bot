{"version":3,"file":"VaultV2.cjs","sources":["../../../../../src/contracts/dex/v2/vault/VaultV2.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { QueryIdType, AmountType, AddressType } from \"@/types\";\nimport { Contract, type ContractOptions } from \"@/contracts/core/Contract\";\nimport { DEX_VERSION, DEX_OP_CODES } from \"@/contracts/dex/constants\";\n\nexport interface VaultV2Options extends ContractOptions {\n  gasConstants?: Partial<typeof VaultV2.gasConstants>;\n}\n\n/**\n * Token vault stores referral fees on a separate contract similar to an LP account.\n * This will allow us to decrease TX fees for swaps since users won't have to pay for additional Jetton transfer TX.\n *\n * Vault address is defined by router_address, owner_address and router_token_Wallet_address,\n * so, for each token, each user can have a dedicated vault contract.\n */\nexport class VaultV2 extends Contract {\n  public static readonly version = DEX_VERSION.v2;\n\n  public static readonly gasConstants = {\n    withdrawFee: toNano(\"0.3\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: VaultV2Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...VaultV2.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createWithdrawFeeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.WITHDRAW_FEE, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `withdraw_fee` transaction.\n   *\n   * @param {ContractProvider} provider - {@link ContractProvider} instance\n   *\n   * @param {object | undefined} params - Optional tx params\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   *\n   * @returns {SenderArguments} all data required to execute a `withdraw_fee` transaction.\n   */\n  public async getWithdrawFeeTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createWithdrawFeeBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.withdrawFee);\n\n    return { to, body, value };\n  }\n\n  public async sendWithdrawFee(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<VaultV2[\"getWithdrawFeeTxParams\"]>[1],\n  ) {\n    const txParams = await this.getWithdrawFeeTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  /**\n   * Get the current state of the vault contract.\n   *\n   * @param {ContractProvider} provider - {@link ContractProvider} instance\n   *\n   *\n   * @returns {Promise<object>} structure containing the current state of the vault contract.\n   */\n  public async getVaultData(provider: ContractProvider) {\n    const result = await provider.get(\"get_vault_data\", []);\n\n    return {\n      ownerAddress: result.stack.readAddress(),\n      tokenAddress: result.stack.readAddress(),\n      routerAddress: result.stack.readAddress(),\n      depositedAmount: result.stack.readBigNumber(),\n    };\n  }\n}\n"],"names":["_VaultV2","Contract","beginCell","DEX_OP_CODES","DEX_VERSION","toNano"],"mappings":";;;;;AAwBO,MAAM,WAAN,MAAMA,kBAAgBC,kBAAS;AAAA,EASpC,YACE,SACA,EAAE,cAAc,GAAG,QAAQ,IAAoB,CAAA,GAC/C;AACA,UAAM,SAAS,OAAO;AAEtB,SAAK,eAAe;AAAA,MAClB,GAAGD,UAAQ;AAAA,MACX,GAAG;AAAA,IAAA;AAAA,EAEP;AAAA,EAEA,MAAa,sBAAsB,QAEjB;AAChB,WAAOE,IAAU,UAAA,EACd,UAAUC,UAAAA,aAAa,cAAc,EAAE,EACvC,WAAU,iCAAQ,YAAW,GAAG,EAAE,EAClC,QAAQ;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAa,uBACX,UACA,QAI0B;AAC1B,UAAM,KAAK,KAAK;AAEV,UAAA,OAAO,MAAM,KAAK,sBAAsB;AAAA,MAC5C,SAAS,iCAAQ;AAAA,IAAA,CAClB;AAED,UAAM,QAAQ,QAAO,iCAAQ,cAAa,KAAK,aAAa,WAAW;AAEhE,WAAA,EAAE,IAAI,MAAM;EACrB;AAAA,EAEA,MAAa,gBACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,uBAAuB,UAAU,MAAM;AAE5D,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,aAAa,UAA4B;AACpD,UAAM,SAAS,MAAM,SAAS,IAAI,kBAAkB,CAAE,CAAA;AAE/C,WAAA;AAAA,MACL,cAAc,OAAO,MAAM,YAAY;AAAA,MACvC,cAAc,OAAO,MAAM,YAAY;AAAA,MACvC,eAAe,OAAO,MAAM,YAAY;AAAA,MACxC,iBAAiB,OAAO,MAAM,cAAc;AAAA,IAAA;AAAA,EAEhD;AACF;AAxFa,SACY,UAAUC,UAAY,YAAA;AADlC,SAGY,eAAe;AAAA,EACpC,aAAaC,WAAO,KAAK;AAC3B;AALK,IAAM,UAAN;;"}