{"version":3,"file":"BaseRouterV2.js","sources":["../../../../../src/contracts/dex/v2/router/BaseRouterV2.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"@/types\";\nimport { Contract, type ContractOptions } from \"@/contracts/core/Contract\";\nimport {\n  DEX_VERSION,\n  DEX_OP_CODES,\n  type DEX_TYPE,\n} from \"@/contracts/dex/constants\";\nimport { JettonMinter } from \"@/contracts/core/JettonMinter\";\nimport type { Pton } from \"@/contracts/pTON/types\";\nimport { createJettonTransferMessage } from \"@/utils/createJettonTransferMessage\";\nimport { toAddress } from \"@/utils/toAddress\";\n\nimport { BasePoolV2 } from \"../pool/BasePoolV2\";\nimport { VaultV2 } from \"../vault/VaultV2\";\n\nexport interface BaseRouterV2Options extends ContractOptions {\n  gasConstants?: Partial<typeof BaseRouterV2.gasConstants>;\n}\n\nexport class BaseRouterV2 extends Contract {\n  public static readonly version = DEX_VERSION.v2;\n\n  public static readonly gasConstants = {\n    swapJettonToJetton: {\n      gasAmount: toNano(\"0.3\"),\n      forwardGasAmount: toNano(\"0.24\"),\n    },\n    swapJettonToTon: {\n      gasAmount: toNano(\"0.3\"),\n      forwardGasAmount: toNano(\"0.24\"),\n    },\n    swapTonToJetton: {\n      forwardGasAmount: toNano(\"0.3\"),\n    },\n    provideLpJetton: {\n      gasAmount: toNano(\"0.3\"),\n      forwardGasAmount: toNano(\"0.235\"),\n    },\n    provideLpTon: {\n      forwardGasAmount: toNano(\"0.3\"),\n    },\n    singleSideProvideLpJetton: {\n      gasAmount: toNano(\"1\"),\n      forwardGasAmount: toNano(\"0.8\"),\n    },\n    singleSideProvideLpTon: {\n      forwardGasAmount: toNano(\"0.8\"),\n    },\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: BaseRouterV2Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...BaseRouterV2.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createSwapBody(params: {\n    askJettonWalletAddress: AddressType;\n    receiverAddress: AddressType;\n    minAskAmount: AmountType;\n    refundAddress: AddressType;\n    excessesAddress?: AddressType;\n    customPayload?: Cell;\n    customPayloadForwardGasAmount?: AmountType;\n    refundPayload?: Cell;\n    refundForwardGasAmount?: AmountType;\n    referralAddress?: AddressType;\n    referralValue?: AmountType;\n  }): Promise<Cell> {\n    if (\n      params.referralValue &&\n      (BigInt(params.referralValue) < 0 || BigInt(params.referralValue) > 100)\n    ) {\n      throw Error(`'referralValue' should be in range (0, 100)`);\n    }\n\n    return beginCell()\n      .storeUint(DEX_OP_CODES.SWAP, 32)\n      .storeAddress(toAddress(params.askJettonWalletAddress))\n      .storeAddress(toAddress(params.refundAddress))\n      .storeAddress(toAddress(params.excessesAddress ?? params.refundAddress))\n      .storeRef(\n        beginCell()\n          .storeCoins(BigInt(params.minAskAmount))\n          .storeAddress(toAddress(params.receiverAddress))\n          .storeCoins(BigInt(params.customPayloadForwardGasAmount ?? 0))\n          .storeMaybeRef(params.customPayload)\n          .storeCoins(BigInt(params.refundForwardGasAmount ?? 0))\n          .storeMaybeRef(params.refundPayload)\n          .storeUint(BigInt(params.referralValue ?? 10), 16)\n          .storeAddress(\n            params.referralAddress ? toAddress(params.referralAddress) : null,\n          )\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async createCrossSwapBody(params: {\n    askJettonWalletAddress: AddressType;\n    receiverAddress: AddressType;\n    minAskAmount: AmountType;\n    refundAddress: AddressType;\n    excessesAddress?: AddressType;\n    customPayload?: Cell;\n    customPayloadForwardGasAmount?: AmountType;\n    refundPayload?: Cell;\n    refundForwardGasAmount?: AmountType;\n    referralAddress?: AddressType;\n    referralValue?: AmountType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.CROSS_SWAP, 32)\n      .storeAddress(toAddress(params.askJettonWalletAddress))\n      .storeAddress(toAddress(params.refundAddress))\n      .storeAddress(toAddress(params.excessesAddress ?? params.refundAddress))\n      .storeRef(\n        beginCell()\n          .storeCoins(BigInt(params.minAskAmount))\n          .storeAddress(toAddress(params.receiverAddress))\n          .storeCoins(BigInt(params.customPayloadForwardGasAmount ?? 0))\n          .storeMaybeRef(params.customPayload)\n          .storeCoins(BigInt(params.refundForwardGasAmount ?? 0))\n          .storeMaybeRef(params.refundPayload)\n          .storeUint(BigInt(params.referralValue ?? 10), 16)\n          .storeAddress(\n            params.referralAddress ? toAddress(params.referralAddress) : null,\n          )\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async getSwapJettonToJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      offerJettonAddress: AddressType;\n      askJettonAddress: AddressType;\n      offerAmount: AmountType;\n      minAskAmount: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      referralAddress?: AddressType;\n      referralValue?: AmountType;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      refundPayload?: Cell;\n      refundForwardGasAmount?: AmountType;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const contractAddress = this.address;\n\n    const [offerJettonWalletAddress, askJettonWalletAddress] =\n      await Promise.all([\n        provider\n          .open(JettonMinter.create(params.offerJettonAddress))\n          .getWalletAddress(params.userWalletAddress),\n        provider\n          .open(JettonMinter.create(params.askJettonAddress))\n          .getWalletAddress(contractAddress),\n      ]);\n\n    const forwardTonAmount = BigInt(\n      params.forwardGasAmount ??\n        this.gasConstants.swapJettonToJetton.forwardGasAmount,\n    );\n\n    const forwardPayload = await this.createSwapBody({\n      askJettonWalletAddress: askJettonWalletAddress,\n      receiverAddress: params.userWalletAddress,\n      minAskAmount: params.minAskAmount,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      referralAddress: params.referralAddress,\n      referralValue: params.referralValue,\n      customPayload: params.customPayload,\n      customPayloadForwardGasAmount: params.customPayloadForwardGasAmount,\n      refundPayload: params.refundPayload,\n      refundForwardGasAmount: params.refundForwardGasAmount,\n    });\n\n    const body = createJettonTransferMessage({\n      queryId: params.queryId ?? 0,\n      amount: params.offerAmount,\n      destination: contractAddress,\n      responseDestination: params.userWalletAddress,\n      forwardPayload,\n      forwardTonAmount,\n    });\n\n    const value = BigInt(\n      params.gasAmount ?? this.gasConstants.swapJettonToJetton.gasAmount,\n    );\n\n    return {\n      to: offerJettonWalletAddress,\n      value,\n      body,\n    };\n  }\n\n  public async sendSwapJettonToJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2[\"getSwapJettonToJettonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getSwapJettonToJettonTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async getSwapJettonToTonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      offerJettonAddress: AddressType;\n      proxyTon: Pton;\n      offerAmount: AmountType;\n      minAskAmount: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      referralAddress?: AddressType;\n      referralValue?: AmountType;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      refundPayload?: Cell;\n      refundForwardGasAmount?: AmountType;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    return await this.getSwapJettonToJettonTxParams(provider, {\n      ...params,\n      askJettonAddress: params.proxyTon.address,\n      gasAmount:\n        params.gasAmount ?? this.gasConstants.swapJettonToTon.gasAmount,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.swapJettonToTon.forwardGasAmount,\n    });\n  }\n\n  public async sendSwapJettonToTon(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2[\"getSwapJettonToTonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getSwapJettonToTonTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async getSwapTonToJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      proxyTon: Pton;\n      askJettonAddress: AddressType;\n      offerAmount: AmountType;\n      minAskAmount: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      referralAddress?: AddressType;\n      referralValue?: AmountType;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      refundPayload?: Cell;\n      refundForwardGasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const contractAddress = this.address;\n\n    const askJettonWalletAddress = await provider\n      .open(JettonMinter.create(params.askJettonAddress))\n      .getWalletAddress(contractAddress);\n\n    const forwardPayload = await this.createSwapBody({\n      askJettonWalletAddress: askJettonWalletAddress,\n      receiverAddress: params.userWalletAddress,\n      minAskAmount: params.minAskAmount,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      referralAddress: params.referralAddress,\n      referralValue: params.referralValue,\n      customPayload: params.customPayload,\n      customPayloadForwardGasAmount: params.customPayloadForwardGasAmount,\n      refundPayload: params.refundPayload,\n      refundForwardGasAmount: params.refundForwardGasAmount,\n    });\n\n    const forwardTonAmount = BigInt(\n      params.forwardGasAmount ??\n        this.gasConstants.swapTonToJetton.forwardGasAmount,\n    );\n\n    return await provider.open(params.proxyTon).getTonTransferTxParams({\n      queryId: params.queryId ?? 0,\n      tonAmount: params.offerAmount,\n      destinationAddress: contractAddress,\n      refundAddress: params.userWalletAddress,\n      forwardPayload,\n      forwardTonAmount,\n    });\n  }\n\n  public async sendSwapTonToJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2[\"getSwapTonToJettonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getSwapTonToJettonTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createProvideLiquidityBody(params: {\n    routerWalletAddress: AddressType;\n    minLpOut: AmountType;\n    receiverAddress: AddressType;\n    refundAddress: AddressType;\n    excessesAddress?: AddressType;\n    bothPositive: boolean;\n    customPayload?: Cell;\n    customPayloadForwardGasAmount?: AmountType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.PROVIDE_LP, 32)\n      .storeAddress(toAddress(params.routerWalletAddress))\n      .storeAddress(toAddress(params.refundAddress))\n      .storeAddress(toAddress(params.excessesAddress ?? params.refundAddress))\n      .storeRef(\n        beginCell()\n          .storeCoins(BigInt(params.minLpOut))\n          .storeAddress(toAddress(params.receiverAddress))\n          .storeUint(params.bothPositive ? 1 : 0, 1)\n          .storeCoins(BigInt(params.customPayloadForwardGasAmount ?? 0))\n          .storeMaybeRef(params.customPayload)\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async createCrossProvideLiquidityBody(params: {\n    routerWalletAddress: AddressType;\n    minLpOut: AmountType;\n    receiverAddress: AddressType;\n    refundAddress: AddressType;\n    excessesAddress?: AddressType;\n    bothPositive: boolean;\n    customPayload?: Cell;\n    customPayloadForwardGasAmount?: AmountType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.CROSS_PROVIDE_LP, 32)\n      .storeAddress(toAddress(params.routerWalletAddress))\n      .storeAddress(toAddress(params.refundAddress))\n      .storeAddress(toAddress(params.excessesAddress ?? params.refundAddress))\n      .storeRef(\n        beginCell()\n          .storeCoins(BigInt(params.minLpOut))\n          .storeAddress(toAddress(params.receiverAddress))\n          .storeUint(params.bothPositive ? 1 : 0, 1)\n          .storeCoins(BigInt(params.customPayloadForwardGasAmount ?? 0))\n          .storeMaybeRef(params.customPayload)\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async getProvideLiquidityJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      sendTokenAddress: AddressType;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityJettonTxParams(provider, {\n      ...params,\n      gasAmount:\n        params.gasAmount ?? this.gasConstants.provideLpJetton.gasAmount,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.provideLpJetton.forwardGasAmount,\n      bothPositive: true,\n    });\n  }\n\n  public async sendProvideLiquidityJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2[\"getProvideLiquidityJettonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getProvideLiquidityJettonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  public async getSingleSideProvideLiquidityJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      sendTokenAddress: AddressType;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityJettonTxParams(provider, {\n      ...params,\n      gasAmount:\n        params.gasAmount ??\n        this.gasConstants.singleSideProvideLpJetton.gasAmount,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.singleSideProvideLpJetton.forwardGasAmount,\n      bothPositive: false,\n    });\n  }\n\n  public async sendSingleSideProvideLiquidityJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<\n      BaseRouterV2[\"getSingleSideProvideLiquidityJettonTxParams\"]\n    >[1],\n  ) {\n    const txParams = await this.getSingleSideProvideLiquidityJettonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  protected async implGetProvideLiquidityJettonTxParams(\n    provider: ContractProvider,\n    params: Parameters<BaseRouterV2[\"getProvideLiquidityJettonTxParams\"]>[1] & {\n      gasAmount: AmountType;\n      forwardGasAmount: AmountType;\n      bothPositive: boolean;\n    },\n  ) {\n    const contractAddress = this.address;\n\n    const [jettonWalletAddress, routerWalletAddress] = await Promise.all([\n      provider\n        .open(JettonMinter.create(params.sendTokenAddress))\n        .getWalletAddress(params.userWalletAddress),\n      provider\n        .open(JettonMinter.create(params.otherTokenAddress))\n        .getWalletAddress(contractAddress),\n    ]);\n\n    const forwardPayload = await this.createProvideLiquidityBody({\n      routerWalletAddress: routerWalletAddress,\n      receiverAddress: params.userWalletAddress,\n      minLpOut: params.minLpOut,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      customPayload: params.customPayload,\n      customPayloadForwardGasAmount: params.customPayloadForwardGasAmount,\n      bothPositive: params.bothPositive,\n    });\n\n    const forwardTonAmount = BigInt(params.forwardGasAmount);\n\n    const body = createJettonTransferMessage({\n      queryId: params.queryId ?? 0,\n      amount: params.sendAmount,\n      destination: contractAddress,\n      responseDestination: params.userWalletAddress,\n      forwardTonAmount,\n      forwardPayload,\n    });\n\n    const value = BigInt(params.gasAmount);\n\n    return {\n      to: jettonWalletAddress,\n      value,\n      body,\n    };\n  }\n\n  public async getProvideLiquidityTonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      proxyTon: Pton;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      bothPositive?: boolean;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityTonTxParams(provider, {\n      ...params,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.provideLpTon.forwardGasAmount,\n      bothPositive: true,\n    });\n  }\n\n  public async sendProvideLiquidityTon(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2[\"getProvideLiquidityTonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getProvideLiquidityTonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  public async getSingleSideProvideLiquidityTonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      proxyTon: Pton;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      bothPositive?: boolean;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityTonTxParams(provider, {\n      ...params,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.singleSideProvideLpTon.forwardGasAmount,\n      bothPositive: false,\n    });\n  }\n\n  public async sendSingleSideProvideLiquidityTon(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<\n      BaseRouterV2[\"getSingleSideProvideLiquidityTonTxParams\"]\n    >[1],\n  ) {\n    const txParams = await this.getSingleSideProvideLiquidityTonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  protected async implGetProvideLiquidityTonTxParams(\n    provider: ContractProvider,\n    params: Parameters<BaseRouterV2[\"getProvideLiquidityTonTxParams\"]>[1] & {\n      forwardGasAmount: AmountType;\n      bothPositive: boolean;\n    },\n  ) {\n    const contractAddress = this.address;\n\n    const routerWalletAddress = await provider\n      .open(JettonMinter.create(params.otherTokenAddress))\n      .getWalletAddress(contractAddress);\n\n    const forwardPayload = await this.createProvideLiquidityBody({\n      routerWalletAddress: routerWalletAddress,\n      receiverAddress: params.userWalletAddress,\n      minLpOut: params.minLpOut,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      customPayload: params.customPayload,\n      customPayloadForwardGasAmount: params.customPayloadForwardGasAmount,\n      bothPositive: params.bothPositive,\n    });\n\n    const forwardTonAmount = BigInt(params.forwardGasAmount);\n\n    return await provider.open(params.proxyTon).getTonTransferTxParams({\n      queryId: params.queryId ?? 0,\n      tonAmount: params.sendAmount,\n      destinationAddress: contractAddress,\n      refundAddress: params.userWalletAddress,\n      forwardPayload,\n      forwardTonAmount,\n    });\n  }\n\n  public async getPoolAddress(\n    provider: ContractProvider,\n    params: {\n      token0: AddressType;\n      token1: AddressType;\n    },\n  ) {\n    const result = await provider.get(\"get_pool_address\", [\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.token0)).endCell(),\n      },\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.token1)).endCell(),\n      },\n    ]);\n\n    return result.stack.readAddress();\n  }\n\n  public async getPoolAddressByJettonMinters(\n    provider: ContractProvider,\n    params: {\n      token0: AddressType;\n      token1: AddressType;\n    },\n  ) {\n    const [jetton0WalletAddress, jetton1WalletAddress] = await Promise.all([\n      provider\n        .open(JettonMinter.create(params.token0))\n        .getWalletAddress(this.address),\n      provider\n        .open(JettonMinter.create(params.token1))\n        .getWalletAddress(this.address),\n    ]);\n\n    const poolAddress = await this.getPoolAddress(provider, {\n      token0: jetton0WalletAddress,\n      token1: jetton1WalletAddress,\n    });\n\n    return poolAddress;\n  }\n\n  public async getPool(\n    provider: ContractProvider,\n    params: {\n      token0: AddressType;\n      token1: AddressType;\n    },\n  ) {\n    const poolAddress = await this.getPoolAddressByJettonMinters(\n      provider,\n      params,\n    );\n\n    return BasePoolV2.create(poolAddress);\n  }\n\n  public async getVaultAddress(\n    provider: ContractProvider,\n    params: {\n      user: AddressType;\n      tokenWallet: AddressType;\n    },\n  ) {\n    const result = await provider.get(\"get_vault_address\", [\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.user)).endCell(),\n      },\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.tokenWallet)).endCell(),\n      },\n    ]);\n\n    return result.stack.readAddress();\n  }\n\n  public async getVault(\n    provider: ContractProvider,\n    params: {\n      user: AddressType;\n      tokenMinter: AddressType;\n    },\n  ) {\n    const tokenMinter = provider.open(JettonMinter.create(params.tokenMinter));\n\n    const vaultAddress = await this.getVaultAddress(provider, {\n      user: params.user,\n      tokenWallet: await tokenMinter.getWalletAddress(this.address),\n    });\n\n    return VaultV2.create(vaultAddress);\n  }\n\n  public async getRouterVersion(provider: ContractProvider) {\n    const result = await provider.get(\"get_router_version\", []);\n\n    return {\n      major: result.stack.readNumber(),\n      minor: result.stack.readNumber(),\n      development: result.stack.readString(),\n    };\n  }\n\n  public async getRouterData(provider: ContractProvider) {\n    const result = await provider.get(\"get_router_data\", []);\n\n    return {\n      routerId: result.stack.readNumber(),\n      dexType: result.stack.readString() as DEX_TYPE,\n      isLocked: result.stack.readBoolean(),\n      adminAddress: result.stack.readAddress(),\n      tempUpgrade: result.stack.readCell(),\n      poolCode: result.stack.readCell(),\n      jettonLpWalletCode: result.stack.readCell(),\n      lpAccountCode: result.stack.readCell(),\n      vaultCode: result.stack.readCell(),\n    };\n  }\n}\n"],"names":["_BaseRouterV2"],"mappings":"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"}