{"version":3,"file":"LpAccountV2.cjs","sources":["../../../../../src/contracts/dex/v2/LpAccount/LpAccountV2.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"@/types\";\nimport { Contract, type ContractOptions } from \"@/contracts/core/Contract\";\nimport { DEX_VERSION, DEX_OP_CODES } from \"@/contracts/dex/constants\";\nimport { toAddress } from \"@/utils/toAddress\";\n\nexport interface LpAccountV2Options extends ContractOptions {\n  gasConstants?: Partial<typeof LpAccountV2.gasConstants>;\n}\n\nexport class LpAccountV2 extends Contract {\n  public static readonly version = DEX_VERSION.v2;\n\n  public static readonly gasConstants = {\n    refund: toNano(\"0.8\"),\n    directAddLp: toNano(\"0.3\"),\n    resetGas: toNano(\"0.02\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: LpAccountV2Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...LpAccountV2.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createRefundBody(params?: {\n    leftMaybePayload?: Cell;\n    rightMaybePayload?: Cell;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.REFUND_ME, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .storeMaybeRef(params?.leftMaybePayload)\n      .storeMaybeRef(params?.rightMaybePayload)\n      .endCell();\n  }\n\n  public async getRefundTxParams(\n    provider: ContractProvider,\n    params?: {\n      leftMaybePayload?: Cell;\n      rightMaybePayload?: Cell;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createRefundBody({\n      leftMaybePayload: params?.leftMaybePayload,\n      rightMaybePayload: params?.rightMaybePayload,\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.refund);\n\n    return { to, value, body };\n  }\n\n  public async sendRefund(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV2[\"getRefundTxParams\"]>[1],\n  ) {\n    const txParams = await this.getRefundTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createDirectAddLiquidityBody(params: {\n    amount0: AmountType;\n    amount1: AmountType;\n    minimumLpToMint?: AmountType;\n    userWalletAddress: AddressType;\n    refundAddress?: AddressType;\n    excessesAddress?: AddressType;\n    customPayload?: Cell;\n    customPayloadForwardGasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.DIRECT_ADD_LIQUIDITY, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .storeCoins(BigInt(params.amount0))\n      .storeCoins(BigInt(params.amount1))\n      .storeCoins(BigInt(params.minimumLpToMint ?? 1))\n      .storeCoins(BigInt(params.customPayloadForwardGasAmount ?? 0))\n      .storeAddress(toAddress(params.userWalletAddress))\n      .storeMaybeRef(params.customPayload)\n      .storeRef(\n        beginCell()\n          .storeAddress(\n            toAddress(params.refundAddress ?? params.userWalletAddress),\n          )\n          .storeAddress(\n            toAddress(\n              params.excessesAddress ??\n                params.refundAddress ??\n                params.userWalletAddress,\n            ),\n          )\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async getDirectAddLiquidityTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      amount0: AmountType;\n      amount1: AmountType;\n      minimumLpToMint?: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      customPayload?: Cell;\n      customPayloadForwardGasAmount?: AmountType;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createDirectAddLiquidityBody({\n      amount0: params.amount0,\n      amount1: params.amount1,\n      minimumLpToMint: params.minimumLpToMint,\n      userWalletAddress: params.userWalletAddress,\n      refundAddress: params.refundAddress,\n      excessesAddress: params.excessesAddress,\n      customPayload: params.customPayload,\n      customPayloadForwardGasAmount: params.customPayloadForwardGasAmount,\n      queryId: params.queryId,\n    });\n\n    const value = BigInt(params.gasAmount ?? this.gasConstants.directAddLp);\n\n    return { to, value, body };\n  }\n\n  public async sendDirectAddLiquidity(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV2[\"getDirectAddLiquidityTxParams\"]>[1],\n  ) {\n    const txParams = await this.getDirectAddLiquidityTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createResetGasBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.RESET_GAS, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  public async getResetGasTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createResetGasBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.resetGas);\n\n    return { to, value, body };\n  }\n\n  public async sendResetGas(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV2[\"getResetGasTxParams\"]>[1],\n  ) {\n    const txParams = await this.getResetGasTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async getLpAccountData(provider: ContractProvider) {\n    const result = await provider.get(\"get_lp_account_data\", []);\n\n    return {\n      userAddress: result.stack.readAddress(),\n      poolAddress: result.stack.readAddress(),\n      amount0: result.stack.readBigNumber(),\n      amount1: result.stack.readBigNumber(),\n    };\n  }\n}\n"],"names":["_LpAccountV2","Contract","beginCell","DEX_OP_CODES","toAddress","DEX_VERSION","toNano"],"mappings":"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"}