{"version":3,"file":"Contract.cjs","sources":["../../../src/contracts/core/Contract.ts"],"sourcesContent":["import type { Address, Contract as ContractInterface } from \"@ton/ton\";\n\nimport type { AddressType } from \"@/types\";\nimport { toAddress } from \"@/utils/toAddress\";\n\n// biome-ignore lint/suspicious/noEmptyInterface: it is empty for base class but may be extended in derived classes\nexport interface ContractOptions {}\n\nexport abstract class Contract implements ContractInterface {\n  public readonly address: Address;\n\n  constructor(address: AddressType, options?: ContractOptions) {\n    this.address = toAddress(address);\n  }\n\n  public static create<T extends Contract>(\n    this: new (\n      address: AddressType,\n    ) => T,\n    address: AddressType,\n  ): T {\n    // biome-ignore lint/complexity/noThisInStatic: this here is a derived class\n    return new this(address);\n  }\n}\n"],"names":["toAddress"],"mappings":";;;AAQO,MAAe,SAAsC;AAAA,EAG1D,YAAY,SAAsB,SAA2B;AACtD,SAAA,UAAUA,oBAAU,OAAO;AAAA,EAClC;AAAA,EAEA,OAAc,OAIZ,SACG;AAEI,WAAA,IAAI,KAAK,OAAO;AAAA,EACzB;AACF;;"}