export declare type AssetInfo = Awaited<ReturnType<StonApiClient["getAssets"]>>[number];

export declare const AssetKind: {
    readonly Ton: "Ton";
    readonly Wton: "Wton";
    readonly Jetton: "Jetton";
};

export declare type AssetKind = keyof typeof AssetKind;

export declare type FarmInfo = Awaited<ReturnType<StonApiClient["getFarms"]>>[number];

export declare type FarmNftInfo = FarmInfo["nftInfos"][number];

export declare type PoolInfo = Awaited<ReturnType<StonApiClient["getPools"]>>[number];

export declare class StonApiClient {
    private readonly apiFetch;
    constructor(options?: StonApiClientOptions);
    getAssets(): Promise<{
        balance?: string | undefined;
        blacklisted: boolean;
        community: boolean;
        contractAddress: string;
        decimals: number;
        defaultSymbol: boolean;
        deprecated: boolean;
        dexPriceUsd?: string | undefined;
        displayName?: string | undefined;
        imageUrl?: string | undefined;
        kind: "Ton" | "Wton" | "Jetton";
        symbol: string;
        thirdPartyPriceUsd?: string | undefined;
        walletAddress?: string | undefined;
    }[]>;
    getFarms(): Promise<{
        apy?: string | undefined;
        minStakeDurationS: string;
        minterAddress: string;
        nftInfos: {
            address: string;
            createTimestamp: string;
            minUnstakeTimestamp: string;
            nonclaimedRewards: string;
            stakedTokens: string;
            status: string;
        }[];
        poolAddress: string;
        rewardTokenAddress: string;
        status: string;
    }[]>;
    getPools(): Promise<{
        address: string;
        apy1D?: string | undefined;
        apy7D?: string | undefined;
        apy30D?: string | undefined;
        collectedToken0ProtocolFee: string;
        collectedToken1ProtocolFee: string;
        deprecated: boolean;
        lpAccountAddress?: string | undefined;
        lpBalance?: string | undefined;
        lpFee: string;
        lpPriceUsd?: string | undefined;
        lpTotalSupply: string;
        lpTotalSupplyUsd?: string | undefined;
        lpWalletAddress?: string | undefined;
        protocolFee: string;
        protocolFeeAddress: string;
        refFee: string;
        reserve0: string;
        reserve1: string;
        routerAddress: string;
        token0Address: string;
        token0Balance?: string | undefined;
        token1Address: string;
        token1Balance?: string | undefined;
    }[]>;
    getJettonWalletAddress(query: {
        jettonAddress: string;
        ownerAddress: string;
    }): Promise<string>;
    getWalletAssets(walletAddress: string): Promise<{
        balance?: string | undefined;
        blacklisted: boolean;
        community: boolean;
        contractAddress: string;
        decimals: number;
        defaultSymbol: boolean;
        deprecated: boolean;
        dexPriceUsd?: string | undefined;
        displayName?: string | undefined;
        imageUrl?: string | undefined;
        kind: "Ton" | "Wton" | "Jetton";
        symbol: string;
        thirdPartyPriceUsd?: string | undefined;
        walletAddress?: string | undefined;
    }[]>;
    getWalletFarms(walletAddress: string): Promise<{
        apy?: string | undefined;
        minStakeDurationS: string;
        minterAddress: string;
        nftInfos: {
            address: string;
            createTimestamp: string;
            minUnstakeTimestamp: string;
            nonclaimedRewards: string;
            stakedTokens: string;
            status: string;
        }[];
        poolAddress: string;
        rewardTokenAddress: string;
        status: string;
    }[]>;
    getWalletPools(walletAddress: string): Promise<{
        address: string;
        apy1D?: string | undefined;
        apy7D?: string | undefined;
        apy30D?: string | undefined;
        collectedToken0ProtocolFee: string;
        collectedToken1ProtocolFee: string;
        deprecated: boolean;
        lpAccountAddress?: string | undefined;
        lpBalance?: string | undefined;
        lpFee: string;
        lpPriceUsd?: string | undefined;
        lpTotalSupply: string;
        lpTotalSupplyUsd?: string | undefined;
        lpWalletAddress?: string | undefined;
        protocolFee: string;
        protocolFeeAddress: string;
        refFee: string;
        reserve0: string;
        reserve1: string;
        routerAddress: string;
        token0Address: string;
        token0Balance?: string | undefined;
        token1Address: string;
        token1Balance?: string | undefined;
    }[]>;
}

export declare type StonApiClientOptions = {
    baseUrl?: string;
};

export { }
