from tonsdk.contract import Contract
from tonsdk.boc import Cell

class SaleContract(Contract):
    code = 'b5ee9c7241020c010002a0000114ff00f4a413f4bcf2c80b010201200302007ef230ed44d0d300d31ffa40fa40fa40fa00d4d30030c0018e1df8007007c8cb0016cb1f5004cf1658cf1601cf1601fa02cccb00c9ed54e05f078200fffef2f002014805040057a03859da89a1a601a63ff481f481f481f401a9a6006061a1f481f401f481f4006104208c92b0a0158002ab010202cd080601f7660840ee6b280149828148c2fbcb87089343e903e803e903e800c14e4a848685421e845a814a41c20043232c15400f3c5807e80b2dab25c7ec00970800975d27080ac2385d4115c20043232c15400f3c5807e80b2dab25c7ec00408e48d0d38969c20043232c15400f3c5807e80b2dab25c7ec01c08208417f30f452070096c8cb1f13cb3f23cf165003cf16ca008209c9c380fa02ca00c9718018c8cb0526cf1670fa02cb6accc98306fb007155507007c8cb0016cb1f5004cf1658cf1601cf1601fa02cccb00c9ed5403f5d00e8698180b8d8492f82707d201876a2686980698ffd207d207d207d006a69801818382984e38060004c2d84698fe99fa5556f10e001f18110c08115dd14e000d829d3e382d84f08562f866a18686983ea1800fd8070146000f968ca126ba4e10159f1811c1c9460004e1b1b881c23b28a2198387802f0146000c0b0a09002e925f0be008c00298554410241023f005e05f0a840ff2f00080303339395352c705925f09e05151c705f2e1f4821005138d9115baf2e1f504fa40304066057007c8cb0016cb1f5004cf1658cf1601cf1601fa02cccb00c9ed5400d83137383982103b9aca0018bef2e1c95346c7055152c70515b1f2e1ca702082105fcc3d14218010c8cb0528cf1621fa02cb6acb1f15cb3f27cf1627cf1614ca0023fa0213ca00c98040fb007150664515047007c8cb0016cb1f5004cf1658cf1601cf1601fa02cccb00c9ed5433f55f97'.upper()
    def __init__(self, **kwargs):
        self.code = kwargs.get('code') or self.code
        kwargs["code"] = Cell.one_from_boc(self.code)
        super().__init__(**kwargs)

    def create_data_cell(self) -> Cell:
        return self.options['data_cell']

class AuctionContract(Contract):
    code = 'b5ee9c7201021c01000597000114ff00f4a413f4bcf2c80b0102012002030201480405042cf2db3cf844c0008e8830f8007ff864db3ce0db3cc002141b15160202ce0607028ba03859b679b679041082aa87f085f0a1f087f0a7f0a5f09df09bf099f097f095f08bf09ff08c1a22261a182224181622221614222014213e211c20fa20d820b620f420d220b114190201200809020120121304f5007434c0c05c6c3c903e900c36cf3e10b03ffe10d48831c16c23b40ccc74c7c87000234127265706561745f656e645f61756374696f6e8148831c16c23a0d6f6cf380cb00023411656d657267656e63795f6d6573736167658148831c16c26b50c3434c1f50c007ec0380c383e14d48431c163a10ccc76cf38006014170a0b001320840ee6b280006a6120015c318103e9f852d749c202f2f28103ea01d31f821005138d9112ba12f2f48040d721fa4030f87270f8627ff864db3c1b04e8db3c20c0018ebd30328103edf823f850bef2f28103edf842c0fff2f28103f00182103b9aca00b9f2f28103f1f84ec200f2f2f8525210c705f8435220c705b1f2e193db3ce020c002e302c003925f03e0f842c0fff823f850beb1975f038103edf2f0e0f84b82103b9aca00a05220bef84bc200b015180c0d017630328103edf842c0fff2f28103f00182103b9aca00b9f2f28103f2f823f850b9f2f2f8525210c705f8435220c705b1f84d5220c705b1f2e193db3c1704ce8f160270db3c21f86d82103b9aca00a1f86ef823f86fdb3ce0f850f851a1f823b997f850f851a0f870def84e8e95328103e8f84a5220b9f2f2f86ef86df823f86fdb3ce1f84e821005f5e100a0f84ef84ca6648064f003b6095220b9975f038103e8f2f0e002700f171b0e021adb3c01f86df86ef823f86fdb3c0f1b02f2f84ec101915be0f84ef847a1228208989680a15210bc9930018208989680a1019132e28d0a565bdd5c88189a59081a185cc81899595b881bdd5d189a5908189e48185b9bdd1a195c881d5cd95c8ba001c0ff8e1f308d06d05d58dd1a5bdb881a185cc81899595b8818d85b98d95b1b19590ba0de21c200e30f1011003870208018c8cb05f84dcf165004fa0213cb6a12cb1f01cf16c972fb0000025b001120840ee6b2802a6120001d08300024d7c0dc38167c00807c006000caf8416edded44d0d20001f862d20001f864d20001f866fa4001f86dfa0001f86ed31f01f86fd31f01f870fa4001f872d401f868d430f869f849d0d21f01f867fa4001f863fa0001f86afa0001f86bfa0001f86cd31f01f871fa4001f873d31f30f8657ff861008c20c700c0ff923070e0d31f318b663616e63656c821c705923071e08b473746f70821c705923072e08b666696e697368821c705923072e08b66465706c6f79801c7059173e07001648eab8103edf842c0fff2f28103f2f823f850b9f2f2f8276f22308103f00182103b9aca00b9f2f2f800f852db3ce0840ff2f01703f6f84ec0008e82db3ce0db3cf84e4054f00320c2008e2b70208010c8cb055007cf1622fa0216cb6a15cb1f8bf4d61726b6574706c616365206665658cf16c972fb009134e2f84e4003f00320c2008e2370208010c8cb055004cf1622fa0213cb6a12cb1f8b7526f79616c74798cf16c972fb009131e282080f42407018191a018a7020f82582105fcc3d14c8cb1fcb3ff852cf165003cf1612cb0021fa02cb00c9718018c8cb05f853cf1670fa02cb6acc82080f424070fb02c98306fb007ff8627ff866db3c1b0020f848d0fa40d31fd31ffa40d31fd31f3001e0fb02f84e58a101a120c2008e2270208010c8cb05f852cf165003fa0212cb6acb1f8b650726f6669748cf16c972fb009130e27020f82582105fcc3d14c8cb1fcb3ff84dcf165003cf1612cb008208989680fa02cb00c9718018c8cb05f853cf1670fa02cb6accc98306fb007ff862db3c1b0054f849f848f850f84ff846f844f842c8ca00ca00ca00f84dcf16f84efa02cb1fcb1ff852cf16ccccc9ed54'.upper()
    def __init__(self, **kwargs):
        self.code = kwargs.get('code') or self.code
        kwargs["code"] = Cell.one_from_boc(self.code)
        super().__init__(**kwargs)

    def create_data_cell(self) -> Cell:
        return self.options['data_cell']